diff --git a/.vim/bundle/fzf.vim/autoload/fzf/vim.vim b/.vim/autoload/fzf/vim.vim
index 6a982d7..ad35cba 100644
--- a/.vim/bundle/fzf.vim/autoload/fzf/vim.vim
+++ b/.vim/bundle/fzf.vim/autoload/fzf/vim.vim
@@ -33,7 +33,7 @@ let s:layout_keys = ['window', 'up', 'down', 'left', 'right']
 let s:bin_dir = expand('<sfile>:h:h:h').'/bin/'
 let s:bin = {
 \ 'preview': s:bin_dir.(executable('ruby') ? 'preview.rb' : 'preview.sh'),
-\ 'tags':    s:bin_dir.'tags.pl' }
+\ 'tags':    s:bin_dir.'tags.py' }
 let s:TYPE = {'dict': type({}), 'funcref': type(function('call')), 'string': type(''), 'list': type([])}
 if s:is_win
   if has('nvim')
@@ -805,8 +805,8 @@ function! s:tags_sink(lines)
 endfunction
 
 function! fzf#vim#tags(query, ...)
-  if !executable('perl')
-    return s:warn('Tags command requires perl')
+  if !executable('python')
+    return s:warn('Tags command requires python')
   endif
   if empty(tagfiles())
     call inputsave()
@@ -817,7 +817,7 @@ function! fzf#vim#tags(query, ...)
     redraw
     if gen =~? '^y'
       call s:warn('Preparing tags')
-      call system(get(g:, 'fzf_tags_command', 'ctags -R'.(s:is_win ? ' --output-format=e-ctags' : '')))
+      call system(get(g:, 'fzf_tags_command', 'ctags -R --excmd=number'.(s:is_win ? ' --output-format=e-ctags' : '')))
       if empty(tagfiles())
         return s:warn('Failed to create tags')
       endif
@@ -837,7 +837,7 @@ function! fzf#vim#tags(query, ...)
   let opts = v2_limit < 0 ? '--algo=v1 ' : ''
 
   return s:fzf('tags', {
-  \ 'source':  'perl '.fzf#shellescape(s:bin.tags).' '.join(map(tagfiles, 'fzf#shellescape(fnamemodify(v:val, ":p"))')),
+  \ 'source':  fzf#shellescape(s:bin.tags).' '.join(map(tagfiles, 'fzf#shellescape(fnamemodify(v:val, ":p"))')),
   \ 'sink*':   s:function('s:tags_sink'),
   \ 'options': opts.'--nth 1..2 -m --tiebreak=begin --prompt "Tags> "'.s:q(a:query)}, a:000)
 endfunction
